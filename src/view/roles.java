/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.RolesDAO;
import dto.RolesDTO;
import java.awt.Component;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import model.Roles;

/**
 *
 * @author Edwin
 */
public class roles extends javax.swing.JDialog {

    /**
     * Creates new form Roles
     */
    private final DefaultTableModel modeloTabla;
    private final  RolesDAO rolesDAO = new RolesDAO();
    private final  RolesDAO dao = new RolesDAO();
    
    public roles(JFMenu parent, boolean modal) {
        super(parent, modal); 
        initComponents();
        setLocationRelativeTo(null);
        modeloTabla = (DefaultTableModel) jTable1.getModel();

        // Configurar CheckBox para columna Activo (índice 3)s
        jTable1.getColumnModel().getColumn(3).setCellRenderer(new CheckBoxRenderer());
        jTable1.getColumnModel().getColumn(3).setCellEditor(new CheckBoxEditor(new JCheckBox()));

        cargarDatos();
    }

    // Renderizador del CheckBox
    private class CheckBoxRenderer extends JCheckBox implements TableCellRenderer {
        public CheckBoxRenderer() {
            setHorizontalAlignment(JCheckBox.CENTER);
            setOpaque(true);
        }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        if (value instanceof Integer) {
            setSelected((Integer) value == 1);
        }
        setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
        return this;
    }
}

    // Editor del CheckBox
    private class CheckBoxEditor extends DefaultCellEditor {
        private final JCheckBox checkBox = new JCheckBox();

        public CheckBoxEditor(JCheckBox checkBox) {
            super(checkBox);
            this.checkBox.setHorizontalAlignment(JCheckBox.CENTER);
        }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column) {
        checkBox.setSelected((value instanceof Integer) && ((Integer) value == 1));
        return checkBox;
    }

    @Override
    public Object getCellEditorValue() {
        return checkBox.isSelected() ? 1 : 0;
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Roles");
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Descripción", "Activo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Editar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        RolesDTO oRolesDTO = new RolesDTO();
        // Crear la ventana para la operación de insertar (INS)
        OpRoles oOpRoles = new OpRoles(this, true, "INS", oRolesDTO);
        oOpRoles.setVisible(true);  // Mostrar la ventana de operación
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    int fila = jTable1.getSelectedRow();

    if (fila != -1) {
        try {
            // 1. Obtener el ID del rol de la tabla (columna 0)
            int idRol = Integer.parseInt(modeloTabla.getValueAt(fila, 0).toString());

            // 2. Obtener TODOS los datos desde la BD usando el ID
            RolesDTO rolDTO = (RolesDTO) dao.getById(idRol); // Usamos el DAO que ya está declarado

            if (rolDTO == null) {
                JOptionPane.showMessageDialog(this, 
                    "Rol no encontrado en la base de datos", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            // 3. Validar campo activo (si es editable en la tabla)
            Object valorActivo = modeloTabla.getValueAt(fila, 3); // Columna Activo
            int activo = (valorActivo instanceof Integer) ? (int) valorActivo : 0;
            if (activo != 0 && activo != 1) {
                JOptionPane.showMessageDialog(this, 
                    "El valor de 'activo' debe ser 0 o 1", 
                    "Error en datos", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            rolDTO.setActivo(activo);

            // 4. Crear y mostrar ventana de edición
            OpRoles oOpRoles = new OpRoles(this, true, "UPD", rolDTO);
            oOpRoles.setVisible(true);
            
            // 5. Actualizar la tabla cuando se cierre la ventana de edición
            oOpRoles.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent e) {
                    cargarDatos(); // Actualizar los datos después de editar
                }
            });
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Error en el formato del ID del rol", 
                "Error de formato", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error al acceder a la base de datos: " + e.getMessage(), 
                "Error crítico", 
                JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, 
            "Debe seleccionar un rol para editar", 
            "ERROR", 
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
            int fila = jTable1.getSelectedRow();  // Obtener la fila seleccionada
    if (fila != -1) {
        int idRol = Integer.parseInt(jTable1.getValueAt(fila, 0).toString());  // Obtener el ID del rol desde la tabla
        int opcion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de eliminar este rol?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        
        if (opcion == JOptionPane.YES_OPTION) {
            boolean eliminado = dao.delete(idRol);  // Llamada al método delete() del DAO para eliminar el rol
            if (eliminado) {
                cargarDatos();  // Actualizar la tabla después de la eliminación
                JOptionPane.showMessageDialog(this, "Rol eliminado exitosamente.");
                
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el rol.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Debe seleccionar un rol", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(roles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(roles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(roles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(roles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            //    new roles().setVisible(true);
            }
        });
    }
    
    public void refrescarDatos() {
        cargarDatos(); // Simplemente llama al método existente
    }
    
    
    private void cargarDatos() {
        modeloTabla.setRowCount(0);
        List<Object> roles = rolesDAO.getAll();

        for(Object roles_uncast : roles) {
            if(roles_uncast instanceof RolesDTO) {
                RolesDTO rolDTO = (RolesDTO) roles_uncast;
                modeloTabla.addRow(new Object[]{
                    rolDTO.getId(), 
                    rolDTO.getNombre(), 
                    rolDTO.getDescripcion(),
                    rolDTO.getActivo() // Envía 0 o 1 directamente
                });
            } else if(roles_uncast instanceof Roles) {
                Roles rol = (Roles) roles_uncast;
                modeloTabla.addRow(new Object[]{
                    rol.getId(), 
                    rol.getNombre(), 
                    rol.getDescripcion(),
                    rol.getActivo() // Envía 0 o 1 directamente
                });
            }
        }

        // Seleccionar primera fila si hay datos
        if (modeloTabla.getRowCount() > 0) {
            jTable1.setRowSelectionInterval(0, 0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
